<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="480" onload="init(evt)" viewBox="0 30 1200 510" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (3,003,003 samples, 1.35%)</title><rect x="999.5" y="85" width="15.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1002.51" y="95.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (6,006,006 samples, 2.69%)</title><rect x="613.2" y="405" width="31.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="616.23" y="415.5" >st..</text>
</g>
<g >
<title>marian::ExpressionGraph::findParams (1,001,001 samples, 0.45%)</title><rect x="216.4" y="261" width="5.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="219.37" y="271.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="229" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1166.54" y="239.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_cells.cpp (1,001,001 samples, 0.45%)</title><rect x="645.0" y="421" width="5.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="647.98" y="431.5" ></text>
</g>
<g >
<title>marian::ProdBatched (1,001,001 samples, 0.45%)</title><rect x="25.9" y="325" width="5.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="28.87" y="335.5" ></text>
</g>
<g >
<title>free@plt (1,001,001 samples, 0.45%)</title><rect x="618.5" y="245" width="5.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="621.52" y="255.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (7,007,007 samples, 3.14%)</title><rect x="978.3" y="133" width="37.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="981.34" y="143.5" >Dar..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2,002,002 samples, 0.90%)</title><rect x="189.9" y="293" width="10.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="192.91" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeEvents::Setup (1,001,001 samples, 0.45%)</title><rect x="1168.8" y="325" width="5.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1171.83" y="335.5" ></text>
</g>
<g >
<title>marian::Options::with&lt;char const  (2,002,002 samples, 0.90%)</title><rect x="597.4" y="309" width="10.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="600.35" y="319.5" ></text>
</g>
<g >
<title>marian::UnaryNodeOp::UnaryNodeOp (1,001,001 samples, 0.45%)</title><rect x="211.1" y="229" width="5.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="214.08" y="239.5" ></text>
</g>
<g >
<title>marian::DotBatchedNodeOp::forwardOps (1,001,001 samples, 0.45%)</title><rect x="25.9" y="341" width="5.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="28.87" y="351.5" ></text>
</g>
<g >
<title>sentencepiece::ModelProto::MergePartialFromCodedStream (9,009,009 samples, 4.04%)</title><rect x="655.6" y="325" width="47.6" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="658.56" y="335.5" >sent..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2,002,002 samples, 0.90%)</title><rect x="189.9" y="277" width="10.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="192.91" y="287.5" ></text>
</g>
<g >
<title>marian::io::loadItems (14,014,014 samples, 6.28%)</title><rect x="449.2" y="357" width="74.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="452.19" y="367.5" >marian::..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,001,001 samples, 0.45%)</title><rect x="216.4" y="245" width="5.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="219.37" y="255.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (10,010,010 samples, 4.48%)</title><rect x="962.5" y="197" width="52.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="965.47" y="207.5" >Darts..</text>
</g>
<g >
<title>[ld-2.31.so] (2,002,002 samples, 0.90%)</title><rect x="10.0" y="437" width="10.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>marian::FastOpt::makeMap (1,001,001 samples, 0.45%)</title><rect x="592.1" y="261" width="5.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="595.06" y="271.5" ></text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="655.6" y="293" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="658.56" y="303.5" ></text>
</g>
<g >
<title>marian::ScorerWrapper::init (22,022,022 samples, 9.87%)</title><rect x="322.2" y="373" width="116.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="325.20" y="383.5" >marian::Scorer..</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (2,002,002 samples, 0.90%)</title><rect x="597.4" y="181" width="10.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="600.35" y="191.5" ></text>
</g>
<g >
<title>memcmp (2,002,002 samples, 0.90%)</title><rect x="1121.2" y="197" width="10.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1124.21" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (1,001,001 samples, 0.45%)</title><rect x="195.2" y="213" width="5.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="198.20" y="223.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleBlockMap (1,001,001 samples, 0.45%)</title><rect x="443.9" y="261" width="5.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.90" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2,002,002 samples, 0.90%)</title><rect x="189.9" y="229" width="10.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="192.91" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1,001,001 samples, 0.45%)</title><rect x="20.6" y="325" width="5.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="23.58" y="335.5" ></text>
</g>
<g >
<title>YAML::Node::operator[]&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,001,001 samples, 0.45%)</title><rect x="1174.1" y="373" width="5.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1177.13" y="383.5" ></text>
</g>
<g >
<title>marian::cli::CLIWrapper::add&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,001,001 samples, 0.45%)</title><rect x="1153.0" y="357" width="5.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1155.96" y="367.5" ></text>
</g>
<g >
<title>ruy::RunKernel&lt;ruy::Kernel&lt; (6,006,006 samples, 2.69%)</title><rect x="78.8" y="293" width="31.7" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="81.79" y="303.5" >ru..</text>
</g>
<g >
<title>YAML::Load (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="373" width="5.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1182.42" y="383.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="10.0" y="373" width="5.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>marian::ParamNode::init (11,011,011 samples, 4.93%)</title><rect x="264.0" y="357" width="58.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="266.99" y="367.5" >marian..</text>
</g>
<g >
<title>marian::scorerByType (16,016,016 samples, 7.17%)</title><rect x="523.3" y="357" width="84.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="526.27" y="367.5" >marian::s..</text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (1,001,001 samples, 0.45%)</title><rect x="1184.7" y="421" width="5.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1187.71" y="431.5" ></text>
</g>
<g >
<title>malloc (3,003,003 samples, 1.35%)</title><rect x="682.0" y="261" width="15.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="685.02" y="271.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="10.0" y="405" width="5.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>marian::SentencePieceVocab::loadFromSerialized (92,092,092 samples, 41.26%)</title><rect x="650.3" y="373" width="486.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="653.27" y="383.5" >marian::SentencePieceVocab::loadFromSerialized</text>
</g>
<g >
<title>Pathie::Path::native[abi:cxx11] (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="341" width="5.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1140.09" y="351.5" ></text>
</g>
<g >
<title>sentencepiece::SentencePieceProcessor::~SentencePieceProcessor (3,003,003 samples, 1.35%)</title><rect x="613.2" y="293" width="15.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="616.23" y="303.5" ></text>
</g>
<g >
<title>marian::FastOpt::makeMap (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="357" width="5.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1166.54" y="367.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;absl::string_view, int&gt;*, std::vector&lt;std::pair&lt;absl::string_view, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view, int&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1,001,001 samples, 0.45%)</title><rect x="1131.8" y="181" width="5.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1134.79" y="191.5" ></text>
</g>
<g >
<title>marian::Options::cloneToYamlNode (1,001,001 samples, 0.45%)</title><rect x="1168.8" y="389" width="5.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1171.83" y="399.5" ></text>
</g>
<g >
<title>__libc_start_main (103,103,103 samples, 46.19%)</title><rect x="645.0" y="453" width="545.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="647.98" y="463.5" >__libc_start_main</text>
</g>
<g >
<title>YAML::RegEx::MatchUnchecked&lt;YAML::StreamCharSource&gt; (1,001,001 samples, 0.45%)</title><rect x="443.9" y="181" width="5.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="446.90" y="191.5" ></text>
</g>
<g >
<title>sentencepiece::ModelProto::~ModelProto (3,003,003 samples, 1.35%)</title><rect x="613.2" y="277" width="15.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="616.23" y="287.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="518.0" y="261" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="520.98" y="271.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1142.4" y="357" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1145.38" y="367.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (19,019,019 samples, 8.52%)</title><rect x="322.2" y="325" width="100.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="325.20" y="335.5" >[libc-2.31.so]</text>
</g>
<g >
<title>sentencepiece::ModelProto_SentencePiece::MergePartialFromCodedStream (6,006,006 samples, 2.69%)</title><rect x="671.4" y="309" width="31.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="674.43" y="319.5" >se..</text>
</g>
<g >
<title>google::protobuf::MessageLite::ParseFromArray (10,010,010 samples, 4.48%)</title><rect x="650.3" y="341" width="52.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="653.27" y="351.5" >googl..</text>
</g>
<g >
<title>google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena (3,003,003 samples, 1.35%)</title><rect x="682.0" y="293" width="15.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="685.02" y="303.5" ></text>
</g>
<g >
<title>YAML::Load (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="357" width="5.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1182.42" y="367.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="205.8" y="181" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="208.78" y="191.5" ></text>
</g>
<g >
<title>marian::io::getYamlFromModel (1,001,001 samples, 0.45%)</title><rect x="443.9" y="357" width="5.3" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="446.90" y="367.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (1,001,001 samples, 0.45%)</title><rect x="443.9" y="213" width="5.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="446.90" y="223.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (2,002,002 samples, 0.90%)</title><rect x="1004.8" y="53" width="10.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1007.80" y="63.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;absl::string_view, int&gt;*, std::vector&lt;std::pair&lt;absl::string_view, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view, int&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (12,012,012 samples, 5.38%)</title><rect x="1073.6" y="261" width="63.5" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1076.59" y="271.5" >std::_..</text>
</g>
<g >
<title>marian::Expression&lt;marian::cpu::integer::QuantMultRuyNodeOp, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt;&amp;, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,001,001 samples, 0.45%)</title><rect x="211.1" y="245" width="5.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="214.08" y="255.5" ></text>
</g>
<g >
<title>sentencepiece::unigram::Model::~Model (2,002,002 samples, 0.90%)</title><rect x="629.1" y="277" width="10.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="632.10" y="287.5" ></text>
</g>
<g >
<title>marian::Options::get&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,001,001 samples, 0.45%)</title><rect x="586.8" y="341" width="5.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="589.77" y="351.5" ></text>
</g>
<g >
<title>google::protobuf::io::CodedInputStream::PushLimit (1,001,001 samples, 0.45%)</title><rect x="660.9" y="309" width="5.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="663.85" y="319.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (2,002,002 samples, 0.90%)</title><rect x="10.0" y="469" width="10.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>PHF::init&lt;unsigned long, true&gt; (1,001,001 samples, 0.45%)</title><rect x="592.1" y="229" width="5.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="595.06" y="239.5" ></text>
</g>
<g >
<title>marian::cli::CLIWrapper::add&lt;int&gt; (1,001,001 samples, 0.45%)</title><rect x="1158.3" y="341" width="5.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1161.25" y="351.5" ></text>
</g>
<g >
<title>ruy::RunKernel&lt;ruy::Kernel&lt; (3,003,003 samples, 1.35%)</title><rect x="47.0" y="261" width="15.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="50.04" y="271.5" ></text>
</g>
<g >
<title>marian::FastOpt::construct (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="373" width="5.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1166.54" y="383.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (118,118,118 samples, 52.91%)</title><rect x="20.6" y="469" width="624.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="23.58" y="479.5" >[libc-2.31.so]</text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build&lt;int&gt; (32,032,032 samples, 14.35%)</title><rect x="846.1" y="277" width="169.3" height="15.0" fill="rgb(208,13,3)" rx="2" ry="2" />
<text  x="849.05" y="287.5" >Darts::Details::Doubl..</text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;marian::ScorerWrapper*,  (1,001,001 samples, 0.45%)</title><rect x="639.7" y="373" width="5.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="642.69" y="383.5" ></text>
</g>
<g >
<title>bergamot (223,223,223 samples, 100.00%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >bergamot</text>
</g>
<g >
<title>sentencepiece::ModelFactory::Create (82,082,082 samples, 36.77%)</title><rect x="703.2" y="325" width="433.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="706.18" y="335.5" >sentencepiece::ModelFactory::Create</text>
</g>
<g >
<title>_start (103,103,103 samples, 46.19%)</title><rect x="645.0" y="469" width="545.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="647.98" y="479.5" >_start</text>
</g>
<g >
<title>marian::bergamot::TranslationModel::translateBatch (112,112,112 samples, 50.22%)</title><rect x="20.6" y="405" width="592.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="23.58" y="415.5" >marian::bergamot::TranslationModel::translateBatch</text>
</g>
<g >
<title>marian::TensorBase::set (1,001,001 samples, 0.45%)</title><rect x="316.9" y="309" width="5.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="319.91" y="319.5" ></text>
</g>
<g >
<title>marian::ExpressionGraph::param (2,002,002 samples, 0.90%)</title><rect x="422.7" y="325" width="10.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="425.74" y="335.5" ></text>
</g>
<g >
<title>CLI::Option::operator== (1,001,001 samples, 0.45%)</title><rect x="1147.7" y="309" width="5.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1150.67" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, YAML::Node&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, YAML::Node&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, YAML::Node&gt; &gt; &gt;::_M_erase (1,001,001 samples, 0.45%)</title><rect x="438.6" y="309" width="5.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="441.61" y="319.5" ></text>
</g>
<g >
<title>memcmp (1,001,001 samples, 0.45%)</title><rect x="586.8" y="325" width="5.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="589.77" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_append (1,001,001 samples, 0.45%)</title><rect x="518.0" y="325" width="5.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="520.98" y="335.5" ></text>
</g>
<g >
<title>ruy::(anonymous namespace)::TrMulTask::Run (5,005,005 samples, 2.24%)</title><rect x="36.5" y="293" width="26.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="39.46" y="303.5" >r..</text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (1,001,001 samples, 0.45%)</title><rect x="15.3" y="421" width="5.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="18.29" y="431.5" ></text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="697.9" y="293" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="700.89" y="303.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2,002,002 samples, 0.90%)</title><rect x="629.1" y="245" width="10.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="632.10" y="255.5" ></text>
</g>
<g >
<title>marian::SentencePieceVocab::~SentencePieceVocab (5,005,005 samples, 2.24%)</title><rect x="613.2" y="325" width="26.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="616.23" y="335.5" >m..</text>
</g>
<g >
<title>YAML::Clone (2,002,002 samples, 0.90%)</title><rect x="597.4" y="261" width="10.5" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="600.35" y="271.5" ></text>
</g>
<g >
<title>marian::cpu::integer::PrepareNode::forwardOps (7,007,007 samples, 3.14%)</title><rect x="110.5" y="341" width="37.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="113.54" y="351.5" >mar..</text>
</g>
<g >
<title>[libc-2.31.so] (5,005,005 samples, 2.24%)</title><rect x="1015.4" y="277" width="26.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1018.38" y="287.5" >[..</text>
</g>
<g >
<title>sentencepiece::unigram::Model::Model (82,082,082 samples, 36.77%)</title><rect x="703.2" y="309" width="433.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="706.18" y="319.5" >sentencepiece::unigram::Model::Model</text>
</g>
<g >
<title>marian::EncoderTransformer::build (2,002,002 samples, 0.90%)</title><rect x="205.8" y="341" width="10.6" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="208.78" y="351.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (1,001,001 samples, 0.45%)</title><rect x="443.9" y="277" width="5.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.90" y="287.5" ></text>
</g>
<g >
<title>ruy::RunKernel&lt;ruy::Kernel&lt; (6,006,006 samples, 2.69%)</title><rect x="78.8" y="277" width="31.7" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="81.79" y="287.5" >ru..</text>
</g>
<g >
<title>sentencepiece::SentencePieceProcessor::~SentencePieceProcessor (5,005,005 samples, 2.24%)</title><rect x="613.2" y="309" width="26.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="616.23" y="319.5" >s..</text>
</g>
<g >
<title>marian::denseInline (1,001,001 samples, 0.45%)</title><rect x="211.1" y="293" width="5.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="214.08" y="303.5" ></text>
</g>
<g >
<title>marian::ConfigParser::addOptionsModel (2,002,002 samples, 0.90%)</title><rect x="1147.7" y="373" width="10.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1150.67" y="383.5" ></text>
</g>
<g >
<title>marian::bergamot::TranslationModel::TranslationModel (93,093,093 samples, 41.70%)</title><rect x="650.3" y="421" width="492.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="653.27" y="431.5" >marian::bergamot::TranslationModel::TranslationModel</text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="607.9" y="341" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="610.94" y="351.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="592.1" y="133" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="595.06" y="143.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="261" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1166.54" y="271.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,005,005 samples, 2.24%)</title><rect x="613.2" y="341" width="26.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="616.23" y="351.5" >s..</text>
</g>
<g >
<title>sentencepiece::unigram::Model::BuildTrie (64,064,064 samples, 28.70%)</title><rect x="798.4" y="293" width="338.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="801.43" y="303.5" >sentencepiece::unigram::Model::BuildTrie</text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="213" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1166.54" y="223.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleNode (1,001,001 samples, 0.45%)</title><rect x="443.9" y="245" width="5.3" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="446.90" y="255.5" ></text>
</g>
<g >
<title>marian::cpu::integer::QuantMultRuyNodeOp::forwardOps (8,008,008 samples, 3.59%)</title><rect x="147.6" y="341" width="42.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="150.58" y="351.5" >mar..</text>
</g>
<g >
<title>marian::bergamot::loadFileToMemory (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="373" width="5.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1140.09" y="383.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="189.9" y="197" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="192.91" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt;, std::allocator&lt;IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; const&amp;&gt; (1,001,001 samples, 0.45%)</title><rect x="428.0" y="293" width="5.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="431.03" y="303.5" ></text>
</g>
<g >
<title>marian::EncoderDecoder::~EncoderDecoder (1,001,001 samples, 0.45%)</title><rect x="639.7" y="341" width="5.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="642.69" y="351.5" ></text>
</g>
<g >
<title>marian::LayerNormalizationOp::forwardOps (1,001,001 samples, 0.45%)</title><rect x="31.2" y="341" width="5.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="34.17" y="351.5" ></text>
</g>
<g >
<title>malloc (2,002,002 samples, 0.90%)</title><rect x="766.7" y="261" width="10.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="769.68" y="271.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="277" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1166.54" y="287.5" ></text>
</g>
<g >
<title>YAML::Clone (1,001,001 samples, 0.45%)</title><rect x="1168.8" y="373" width="5.3" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="1171.83" y="383.5" ></text>
</g>
<g >
<title>marian::Transformer&lt;marian::EncoderBase&gt;::LayerFFN (1,001,001 samples, 0.45%)</title><rect x="211.1" y="309" width="5.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="214.08" y="319.5" ></text>
</g>
<g >
<title>marian::Options::clone (1,001,001 samples, 0.45%)</title><rect x="438.6" y="357" width="5.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="441.61" y="367.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="261" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1140.09" y="271.5" ></text>
</g>
<g >
<title>marian::EncoderTransformer::apply (2,002,002 samples, 0.90%)</title><rect x="205.8" y="325" width="10.6" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="208.78" y="335.5" ></text>
</g>
<g >
<title>YAML::Node::operator[]&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,001,001 samples, 0.45%)</title><rect x="205.8" y="245" width="5.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="208.78" y="255.5" ></text>
</g>
<g >
<title>__libc_csu_init (1,001,001 samples, 0.45%)</title><rect x="645.0" y="437" width="5.3" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="647.98" y="447.5" ></text>
</g>
<g >
<title>marian::cpu::ProdBatchedOld (1,001,001 samples, 0.45%)</title><rect x="25.9" y="293" width="5.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="28.87" y="303.5" ></text>
</g>
<g >
<title>__tunable_get_val@plt (1,001,001 samples, 0.45%)</title><rect x="15.3" y="389" width="5.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="18.29" y="399.5" ></text>
</g>
<g >
<title>YAML::Parser::ParseDirectives (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="325" width="5.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1182.42" y="335.5" ></text>
</g>
<g >
<title>marian::ScorerWrapper::startState (2,002,002 samples, 0.90%)</title><rect x="205.8" y="373" width="10.6" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="208.78" y="383.5" ></text>
</g>
<g >
<title>CLI::Option::check_lname (1,001,001 samples, 0.45%)</title><rect x="1158.3" y="277" width="5.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1161.25" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;marian::Vocab*,  (5,005,005 samples, 2.24%)</title><rect x="613.2" y="357" width="26.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="616.23" y="367.5" >s..</text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="613.2" y="245" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="616.23" y="255.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,001,001 samples, 0.45%)</title><rect x="211.1" y="197" width="5.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="214.08" y="207.5" ></text>
</g>
<g >
<title>marian::Node::forward (34,034,034 samples, 15.25%)</title><rect x="25.9" y="357" width="179.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="28.87" y="367.5" >marian::Node::forward</text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="655.6" y="261" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="658.56" y="271.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="10.0" y="421" width="5.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>marian::Options::Options (1,001,001 samples, 0.45%)</title><rect x="592.1" y="293" width="5.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="595.06" y="303.5" ></text>
</g>
<g >
<title>ruy::RunKernel&lt;ruy::Kernel&lt; (3,003,003 samples, 1.35%)</title><rect x="47.0" y="277" width="15.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="50.04" y="287.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="15.3" y="405" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="18.29" y="415.5" ></text>
</g>
<g >
<title>YAML::Scanner::EnsureTokensInQueue (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="293" width="5.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1182.42" y="303.5" ></text>
</g>
<g >
<title>YAML::Load (1,001,001 samples, 0.45%)</title><rect x="443.9" y="341" width="5.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="446.90" y="351.5" ></text>
</g>
<g >
<title>google::protobuf::internal::ExtensionSet::IsInitialized (1,001,001 samples, 0.45%)</title><rect x="650.3" y="309" width="5.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="653.27" y="319.5" ></text>
</g>
<g >
<title>marian::Options::Options (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="389" width="5.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1166.54" y="399.5" ></text>
</g>
<g >
<title>marian::Options::merge (1,001,001 samples, 0.45%)</title><rect x="1174.1" y="389" width="5.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1177.13" y="399.5" ></text>
</g>
<g >
<title>marian::Transformer&lt;marian::DecoderBase&gt;::MultiHead (1,001,001 samples, 0.45%)</title><rect x="216.4" y="293" width="5.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="219.37" y="303.5" ></text>
</g>
<g >
<title>marian::cli::CLIWrapper::add&lt;int&gt; (1,001,001 samples, 0.45%)</title><rect x="1147.7" y="357" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1150.67" y="367.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (10,010,010 samples, 4.48%)</title><rect x="962.5" y="229" width="52.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="965.47" y="239.5" >Darts..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (1,001,001 samples, 0.45%)</title><rect x="639.7" y="357" width="5.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="642.69" y="367.5" ></text>
</g>
<g >
<title>marian::cpu::integer::AffineOrDotNodeOp::forwardOps (14,014,014 samples, 6.28%)</title><rect x="36.5" y="341" width="74.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="39.46" y="351.5" >marian::..</text>
</g>
<g >
<title>marian::ScorerWrapper::step (4,004,004 samples, 1.79%)</title><rect x="216.4" y="373" width="21.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="219.37" y="383.5" ></text>
</g>
<g >
<title>YAML::NodeBuilder::OnScalar (2,002,002 samples, 0.90%)</title><rect x="597.4" y="197" width="10.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="600.35" y="207.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (7,007,007 samples, 3.14%)</title><rect x="449.2" y="325" width="37.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="452.19" y="335.5" >[li..</text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="592.1" y="117" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="595.06" y="127.5" ></text>
</g>
<g >
<title>marian::New&lt;marian::Options, marian::Options const&amp;&gt; (1,001,001 samples, 0.45%)</title><rect x="592.1" y="309" width="5.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="595.06" y="319.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (1,001,001 samples, 0.45%)</title><rect x="443.9" y="229" width="5.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="446.90" y="239.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3,003,003 samples, 1.35%)</title><rect x="682.0" y="245" width="15.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="685.02" y="255.5" ></text>
</g>
<g >
<title>iconv_open (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="293" width="5.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1140.09" y="303.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;absl::string_view, int&gt;*, std::vector&lt;std::pair&lt;absl::string_view, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view, int&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (3,003,003 samples, 1.35%)</title><rect x="1121.2" y="213" width="15.9" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1124.21" y="223.5" ></text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="205.8" y="197" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="208.78" y="207.5" ></text>
</g>
<g >
<title>marian::EncoderDecoder::load (22,022,022 samples, 9.87%)</title><rect x="322.2" y="357" width="116.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="325.20" y="367.5" >marian::Encode..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;marian::bergamot::AsyncService::AsyncService (118,118,118 samples, 52.91%)</title><rect x="20.6" y="421" width="624.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="23.58" y="431.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;marian::bergamot::AsyncServi..</text>
</g>
<g >
<title>sentencepiece::SentencePieceProcessor::LoadFromSerializedProto (92,092,092 samples, 41.26%)</title><rect x="650.3" y="357" width="486.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="653.27" y="367.5" >sentencepiece::SentencePieceProcessor::LoadFromSerializedProto</text>
</g>
<g >
<title>marian::createScorers (33,033,033 samples, 14.80%)</title><rect x="438.6" y="373" width="174.6" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="441.61" y="383.5" >marian::createScorers</text>
</g>
<g >
<title>YAML::detail::memory::create_node (1,001,001 samples, 0.45%)</title><rect x="602.6" y="165" width="5.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="605.65" y="175.5" ></text>
</g>
<g >
<title>marian::bergamot::TranslationModel::loadBackend (71,071,071 samples, 31.84%)</title><rect x="237.5" y="389" width="375.7" height="15.0" fill="rgb(19,165,15)" rx="2" ry="2" />
<text  x="240.53" y="399.5" >marian::bergamot::TranslationModel::loadBackend</text>
</g>
<g >
<title>YAML::NodeBuilder::Push (1,001,001 samples, 0.45%)</title><rect x="597.4" y="165" width="5.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="600.35" y="175.5" ></text>
</g>
<g >
<title>marian::PerfectHash::PerfectHash (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="341" width="5.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1166.54" y="351.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (6,006,006 samples, 2.69%)</title><rect x="983.6" y="117" width="31.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="986.63" y="127.5" >Da..</text>
</g>
<g >
<title>marian::bergamot::Vocabs::load (92,092,092 samples, 41.26%)</title><rect x="650.3" y="389" width="486.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="653.27" y="399.5" >marian::bergamot::Vocabs::load</text>
</g>
<g >
<title>marian::highway (1,001,001 samples, 0.45%)</title><rect x="232.2" y="245" width="5.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="235.24" y="255.5" ></text>
</g>
<g >
<title>__aarch64_ldadd4_acq_rel (1,001,001 samples, 0.45%)</title><rect x="1174.1" y="357" width="5.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1177.13" y="367.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,001,001 samples, 0.45%)</title><rect x="1142.4" y="373" width="5.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1145.38" y="383.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="592.1" y="181" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="595.06" y="191.5" ></text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="602.6" y="149" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="605.65" y="159.5" ></text>
</g>
<g >
<title>ruy::Kernel8bitNeon (3,003,003 samples, 1.35%)</title><rect x="47.0" y="245" width="15.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="50.04" y="255.5" ></text>
</g>
<g >
<title>sentencepiece::unigram::Model::~Model (2,002,002 samples, 0.90%)</title><rect x="629.1" y="293" width="10.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="632.10" y="303.5" ></text>
</g>
<g >
<title>marian::ExpressionGraph::load (22,022,022 samples, 9.87%)</title><rect x="322.2" y="341" width="116.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="325.20" y="351.5" >marian::Expres..</text>
</g>
<g >
<title>marian::New&lt;marian::Options, char const  (1,001,001 samples, 0.45%)</title><rect x="205.8" y="277" width="5.3" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="208.78" y="287.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="245" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1140.09" y="255.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="277" width="5.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1182.42" y="287.5" ></text>
</g>
<g >
<title>marian::affine (1,001,001 samples, 0.45%)</title><rect x="211.1" y="277" width="5.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="214.08" y="287.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (7,007,007 samples, 3.14%)</title><rect x="978.3" y="149" width="37.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="981.34" y="159.5" >Dar..</text>
</g>
<g >
<title>marian::rnn::SSRU::applyState (1,001,001 samples, 0.45%)</title><rect x="232.2" y="261" width="5.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="235.24" y="271.5" ></text>
</g>
<g >
<title>YAML::NodeEvents::Emit (2,002,002 samples, 0.90%)</title><rect x="597.4" y="229" width="10.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="600.35" y="239.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="245" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1166.54" y="255.5" ></text>
</g>
<g >
<title>marian::DecoderTransformer::step (4,004,004 samples, 1.79%)</title><rect x="216.4" y="341" width="21.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="219.37" y="351.5" ></text>
</g>
<g >
<title>operator new@plt (1,001,001 samples, 0.45%)</title><rect x="666.1" y="309" width="5.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="669.14" y="319.5" ></text>
</g>
<g >
<title>marian::Expression&lt;marian::HighwayNodeOp, std::vector&lt;IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt;, std::allocator&lt;IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;&amp;&gt; (1,001,001 samples, 0.45%)</title><rect x="232.2" y="229" width="5.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="235.24" y="239.5" ></text>
</g>
<g >
<title>marian::ExpressionGraph::forward (35,035,035 samples, 15.70%)</title><rect x="20.6" y="373" width="185.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="23.58" y="383.5" >marian::ExpressionGraph:..</text>
</g>
<g >
<title>marian::ConfigParser::addSuboptionsBatching (1,001,001 samples, 0.45%)</title><rect x="1158.3" y="357" width="5.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1161.25" y="367.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (10,010,010 samples, 4.48%)</title><rect x="962.5" y="165" width="52.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="965.47" y="175.5" >Darts..</text>
</g>
<g >
<title>marian::cli::CLIWrapper::addOption&lt;int,  (1,001,001 samples, 0.45%)</title><rect x="1147.7" y="341" width="5.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1150.67" y="351.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="655.6" y="277" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="658.56" y="287.5" ></text>
</g>
<g >
<title>ruy::Pack8bitColMajorForNeon (2,002,002 samples, 0.90%)</title><rect x="36.5" y="277" width="10.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="39.46" y="287.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,005,005 samples, 2.24%)</title><rect x="613.2" y="373" width="26.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="616.23" y="383.5" >s..</text>
</g>
<g >
<title>marian::ExpressionGraph::findParams (1,001,001 samples, 0.45%)</title><rect x="422.7" y="309" width="5.3" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="425.74" y="319.5" ></text>
</g>
<g >
<title>marian::cpu::integer::unquantizeWemb&lt; (6,006,006 samples, 2.69%)</title><rect x="486.2" y="325" width="31.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="489.23" y="335.5" >ma..</text>
</g>
<g >
<title>operator new (2,002,002 samples, 0.90%)</title><rect x="766.7" y="277" width="10.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="769.68" y="287.5" ></text>
</g>
<g >
<title>marian::io::binary::loadItems (14,014,014 samples, 6.28%)</title><rect x="449.2" y="341" width="74.1" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="452.19" y="351.5" >marian::..</text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (1,001,001 samples, 0.45%)</title><rect x="1010.1" y="37" width="5.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1013.09" y="47.5" ></text>
</g>
<g >
<title>sentencepiece::ModelInterface::InitializePieces (10,010,010 samples, 4.48%)</title><rect x="745.5" y="293" width="52.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="748.52" y="303.5" >sente..</text>
</g>
<g >
<title>YAML::detail::memory::create_node (1,001,001 samples, 0.45%)</title><rect x="205.8" y="213" width="5.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="208.78" y="223.5" ></text>
</g>
<g >
<title>marian::models::createBaseModelByType (3,003,003 samples, 1.35%)</title><rect x="592.1" y="325" width="15.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="595.06" y="335.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (10,010,010 samples, 4.48%)</title><rect x="962.5" y="261" width="52.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="965.47" y="271.5" >Darts..</text>
</g>
<g >
<title>marian::EncoderDecoderLayerBase::createEmbeddingLayer (1,001,001 samples, 0.45%)</title><rect x="205.8" y="293" width="5.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="208.78" y="303.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (1,001,001 samples, 0.45%)</title><rect x="443.9" y="309" width="5.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="446.90" y="319.5" ></text>
</g>
<g >
<title>sentencepiece::ModelProto::IsInitialized (1,001,001 samples, 0.45%)</title><rect x="650.3" y="325" width="5.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="653.27" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1,001,001 samples, 0.45%)</title><rect x="793.1" y="277" width="5.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="796.14" y="287.5" ></text>
</g>
<g >
<title>sentencepiece::ModelProto::~ModelProto (2,002,002 samples, 0.90%)</title><rect x="613.2" y="261" width="10.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="616.23" y="271.5" ></text>
</g>
<g >
<title>marian::EncoderDecoder::step (4,004,004 samples, 1.79%)</title><rect x="216.4" y="357" width="21.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="219.37" y="367.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="592.1" y="165" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="595.06" y="175.5" ></text>
</g>
<g >
<title>operator new@plt (1,001,001 samples, 0.45%)</title><rect x="740.2" y="293" width="5.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="743.22" y="303.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="772.0" y="245" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="774.97" y="255.5" ></text>
</g>
<g >
<title>__gconv_open (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="277" width="5.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1140.09" y="287.5" ></text>
</g>
<g >
<title>cfree (1,001,001 samples, 0.45%)</title><rect x="1153.0" y="293" width="5.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1155.96" y="303.5" ></text>
</g>
<g >
<title>marian::DecoderTransformer::step (4,004,004 samples, 1.79%)</title><rect x="216.4" y="325" width="21.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="219.37" y="335.5" ></text>
</g>
<g >
<title>YAML::Scanner::empty (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="309" width="5.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1182.42" y="319.5" ></text>
</g>
<g >
<title>[ld-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="10.0" y="389" width="5.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>ruy::Pack8bitColMajorForNeon (3,003,003 samples, 1.35%)</title><rect x="62.9" y="293" width="15.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="65.91" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (1,001,001 samples, 0.45%)</title><rect x="607.9" y="357" width="5.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="610.94" y="367.5" ></text>
</g>
<g >
<title>marian::BeamSearch::search (41,041,041 samples, 18.39%)</title><rect x="20.6" y="389" width="216.9" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="23.58" y="399.5" >marian::BeamSearch::search</text>
</g>
<g >
<title>operator new (3,003,003 samples, 1.35%)</title><rect x="682.0" y="277" width="15.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="685.02" y="287.5" ></text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="518.0" y="309" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="520.98" y="319.5" ></text>
</g>
<g >
<title>Darts::Details::DawgBuilder::flush (14,014,014 samples, 6.28%)</title><rect x="888.4" y="245" width="74.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="891.39" y="255.5" >Darts::D..</text>
</g>
<g >
<title>marian::ElementBinaryNodeOp::ElementBinaryNodeOp (1,001,001 samples, 0.45%)</title><rect x="221.7" y="293" width="5.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="224.66" y="303.5" ></text>
</g>
<g >
<title>YAML::NodeEvents::Setup (1,001,001 samples, 0.45%)</title><rect x="1168.8" y="341" width="5.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1171.83" y="351.5" ></text>
</g>
<g >
<title>all (223,223,223 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>marian::EncoderDecoderLayerBase::getEmbeddingLayer (1,001,001 samples, 0.45%)</title><rect x="205.8" y="309" width="5.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="208.78" y="319.5" ></text>
</g>
<g >
<title>marian::cpu::integer::affineOrDotRUI (1,001,001 samples, 0.45%)</title><rect x="211.1" y="261" width="5.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="214.08" y="271.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (12,012,012 samples, 5.38%)</title><rect x="523.3" y="325" width="63.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="526.27" y="335.5" >[libc-..</text>
</g>
<g >
<title>marian::NaryNodeOp::NaryNodeOp (1,001,001 samples, 0.45%)</title><rect x="211.1" y="213" width="5.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="214.08" y="223.5" ></text>
</g>
<g >
<title>qsort_r (1,001,001 samples, 0.45%)</title><rect x="592.1" y="213" width="5.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="595.06" y="223.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="229" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1140.09" y="239.5" ></text>
</g>
<g >
<title>marian::cli::CLIWrapper::addOption&lt;int,  (1,001,001 samples, 0.45%)</title><rect x="1158.3" y="325" width="5.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1161.25" y="335.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="639.7" y="325" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="642.69" y="335.5" ></text>
</g>
<g >
<title>marian::Options::set&lt;bool&gt; (1,001,001 samples, 0.45%)</title><rect x="205.8" y="261" width="5.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="208.78" y="271.5" ></text>
</g>
<g >
<title>marian::rnn::RNN::transduce (2,002,002 samples, 0.90%)</title><rect x="227.0" y="309" width="10.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="229.95" y="319.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="592.1" y="149" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="595.06" y="159.5" ></text>
</g>
<g >
<title>marian::Node::allocate (1,001,001 samples, 0.45%)</title><rect x="20.6" y="357" width="5.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="23.58" y="367.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (1,001,001 samples, 0.45%)</title><rect x="1184.7" y="405" width="5.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1187.71" y="415.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (5,005,005 samples, 2.24%)</title><rect x="237.5" y="373" width="26.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="240.53" y="383.5" >[..</text>
</g>
<g >
<title>CLI::App::add_option (1,001,001 samples, 0.45%)</title><rect x="1147.7" y="325" width="5.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1150.67" y="335.5" ></text>
</g>
<g >
<title>YAML::NodeEvents::Emit (2,002,002 samples, 0.90%)</title><rect x="597.4" y="213" width="10.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="600.35" y="223.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr&lt;marian::bergamot::TranslationModel*,  (6,006,006 samples, 2.69%)</title><rect x="613.2" y="389" width="31.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="616.23" y="399.5" >st..</text>
</g>
<g >
<title>marian::New&lt;marian::ScorerWrapper, std::shared_ptr&lt;marian::models::IModel&gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, float&amp;, std::vector&lt;marian::io::Item, std::allocator&lt;marian::io::Item&gt; &gt;&amp;&gt; (12,012,012 samples, 5.38%)</title><rect x="523.3" y="341" width="63.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="526.27" y="351.5" >marian..</text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (6,006,006 samples, 2.69%)</title><rect x="983.6" y="101" width="31.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="986.63" y="111.5" >Da..</text>
</g>
<g >
<title>marian::EncoderDecoder::startState (2,002,002 samples, 0.90%)</title><rect x="205.8" y="357" width="10.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="208.78" y="367.5" ></text>
</g>
<g >
<title>marian::bergamot::parseOptionsFromFilePath (8,008,008 samples, 3.59%)</title><rect x="1142.4" y="421" width="42.3" height="15.0" fill="rgb(19,165,15)" rx="2" ry="2" />
<text  x="1145.38" y="431.5" >mar..</text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (10,010,010 samples, 4.48%)</title><rect x="962.5" y="181" width="52.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="965.47" y="191.5" >Darts..</text>
</g>
<g >
<title>marian::bergamot::TranslationModel::TranslationModel (92,092,092 samples, 41.26%)</title><rect x="650.3" y="405" width="486.8" height="15.0" fill="rgb(19,165,15)" rx="2" ry="2" />
<text  x="653.27" y="415.5" >marian::bergamot::TranslationModel::TranslationModel</text>
</g>
<g >
<title>sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece (1,001,001 samples, 0.45%)</title><rect x="623.8" y="261" width="5.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="626.81" y="271.5" ></text>
</g>
<g >
<title>Pathie::Path::size (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="357" width="5.3" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1140.09" y="367.5" ></text>
</g>
<g >
<title>PHF::init&lt;unsigned long, true&gt; (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="325" width="5.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1166.54" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2,002,002 samples, 0.90%)</title><rect x="189.9" y="325" width="10.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="192.91" y="335.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2,002,002 samples, 0.90%)</title><rect x="1031.3" y="261" width="10.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1034.26" y="271.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="592.1" y="197" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="595.06" y="207.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (10,010,010 samples, 4.48%)</title><rect x="962.5" y="213" width="52.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="965.47" y="223.5" >Darts..</text>
</g>
<g >
<title>marian::cpu::ProdBatched (1,001,001 samples, 0.45%)</title><rect x="25.9" y="309" width="5.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="28.87" y="319.5" ></text>
</g>
<g >
<title>sentencepiece::SentencePieceProcessor::Load (82,082,082 samples, 36.77%)</title><rect x="703.2" y="341" width="433.9" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="706.18" y="351.5" >sentencepiece::SentencePieceProcessor::Load</text>
</g>
<g >
<title>google::protobuf::Arena::CreateMaybeMessage&lt;sentencepiece::ModelProto_SentencePiece&gt; (1,001,001 samples, 0.45%)</title><rect x="655.6" y="309" width="5.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="658.56" y="319.5" ></text>
</g>
<g >
<title>CLI::App::add_option (1,001,001 samples, 0.45%)</title><rect x="1158.3" y="309" width="5.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1161.25" y="319.5" ></text>
</g>
<g >
<title>ruy::Kernel8bitNeon (6,006,006 samples, 2.69%)</title><rect x="78.8" y="261" width="31.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="81.79" y="271.5" >ru..</text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;absl::string_view, int&gt;*, std::vector&lt;std::pair&lt;absl::string_view, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view, int&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (8,008,008 samples, 3.59%)</title><rect x="1094.8" y="229" width="42.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1097.75" y="239.5" >std..</text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="205.8" y="165" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="208.78" y="175.5" ></text>
</g>
<g >
<title>ruy::TrMul (14,014,014 samples, 6.28%)</title><rect x="36.5" y="309" width="74.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="39.46" y="319.5" >ruy::TrMul</text>
</g>
<g >
<title>CLI::Option::operator== (1,001,001 samples, 0.45%)</title><rect x="1153.0" y="309" width="5.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1155.96" y="319.5" ></text>
</g>
<g >
<title>marian::Options::Options (2,002,002 samples, 0.90%)</title><rect x="597.4" y="277" width="10.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="600.35" y="287.5" ></text>
</g>
<g >
<title>YAML::SingleDocParser::HandleDocument (1,001,001 samples, 0.45%)</title><rect x="443.9" y="293" width="5.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="446.90" y="303.5" ></text>
</g>
<g >
<title>memcmp (3,003,003 samples, 1.35%)</title><rect x="1057.7" y="261" width="15.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1060.71" y="271.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="189.9" y="181" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="192.91" y="191.5" ></text>
</g>
<g >
<title>marian::ConfigParser::ConfigParser (3,003,003 samples, 1.35%)</title><rect x="1147.7" y="389" width="15.8" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1150.67" y="399.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;absl::string_view, int&gt;*, std::vector&lt;std::pair&lt;absl::string_view, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view, int&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (18,018,018 samples, 8.07%)</title><rect x="1041.8" y="277" width="95.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1044.84" y="287.5" >std::__intr..</text>
</g>
<g >
<title>marian::ConfigParser::addOptionsTranslation (1,001,001 samples, 0.45%)</title><rect x="1158.3" y="373" width="5.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1161.25" y="383.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="518.0" y="293" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="520.98" y="303.5" ></text>
</g>
<g >
<title>Pathie::utf8_to_filename (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="325" width="5.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1140.09" y="335.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (10,010,010 samples, 4.48%)</title><rect x="264.0" y="325" width="52.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="266.99" y="335.5" >[libc..</text>
</g>
<g >
<title>marian::FastOpt::construct (1,001,001 samples, 0.45%)</title><rect x="438.6" y="325" width="5.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="441.61" y="335.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="1168.8" y="293" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1171.83" y="303.5" ></text>
</g>
<g >
<title>YAML::Load (1,001,001 samples, 0.45%)</title><rect x="443.9" y="325" width="5.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="446.90" y="335.5" ></text>
</g>
<g >
<title>marian::ExpressionGraph::param (1,001,001 samples, 0.45%)</title><rect x="216.4" y="277" width="5.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="219.37" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (1,001,001 samples, 0.45%)</title><rect x="433.3" y="325" width="5.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="436.32" y="335.5" ></text>
</g>
<g >
<title>marian::models::createModelFromOptions (3,003,003 samples, 1.35%)</title><rect x="592.1" y="341" width="15.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="595.06" y="351.5" ></text>
</g>
<g >
<title>YAML::Parser::HandleNextDocument (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="341" width="5.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1182.42" y="351.5" ></text>
</g>
<g >
<title>YAML::Scanner::ScanNextToken (1,001,001 samples, 0.45%)</title><rect x="443.9" y="197" width="5.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="446.90" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (1,001,001 samples, 0.45%)</title><rect x="200.5" y="325" width="5.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="203.49" y="335.5" ></text>
</g>
<g >
<title>marian::FastOpt::construct (1,001,001 samples, 0.45%)</title><rect x="592.1" y="277" width="5.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="595.06" y="287.5" ></text>
</g>
<g >
<title>ruy::MulFrontEndFromTrMulParams (14,014,014 samples, 6.28%)</title><rect x="36.5" y="325" width="74.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="39.46" y="335.5" >ruy::Mul..</text>
</g>
<g >
<title>marian::TensorAllocator::allocate (1,001,001 samples, 0.45%)</title><rect x="20.6" y="341" width="5.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="23.58" y="351.5" ></text>
</g>
<g >
<title>marian::cli::CLIWrapper::addOption&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;,  (1,001,001 samples, 0.45%)</title><rect x="1153.0" y="341" width="5.3" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="1155.96" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (1,001,001 samples, 0.45%)</title><rect x="195.2" y="197" width="5.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="198.20" y="207.5" ></text>
</g>
<g >
<title>memcmp (2,002,002 samples, 0.90%)</title><rect x="1110.6" y="213" width="10.6" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1113.63" y="223.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (2,002,002 samples, 0.90%)</title><rect x="629.1" y="261" width="10.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="632.10" y="271.5" ></text>
</g>
<g >
<title>CLI::Option::operator== (1,001,001 samples, 0.45%)</title><rect x="1158.3" y="293" width="5.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1161.25" y="303.5" ></text>
</g>
<g >
<title>marian::Parameters::add (1,001,001 samples, 0.45%)</title><rect x="428.0" y="309" width="5.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="431.03" y="319.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;absl::string_view, int&gt;*, std::vector&lt;std::pair&lt;absl::string_view, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view, int&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (10,010,010 samples, 4.48%)</title><rect x="1084.2" y="245" width="52.9" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1087.17" y="255.5" >std::..</text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="1168.8" y="309" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.83" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;absl::string_view, std::pair&lt;absl::string_view const, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;absl::string_view&gt;, sentencepiece::string_util::string_view_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (3,003,003 samples, 1.35%)</title><rect x="777.3" y="277" width="15.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="780.26" y="287.5" ></text>
</g>
<g >
<title>marian::cpu::integer::fetchAlphaFromModelNodeOp::forwardOps (3,003,003 samples, 1.35%)</title><rect x="189.9" y="341" width="15.9" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="192.91" y="351.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="602.6" y="133" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="605.65" y="143.5" ></text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="195.2" y="181" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="198.20" y="191.5" ></text>
</g>
<g >
<title>marian::inits::LambdaInitConvert::apply (11,011,011 samples, 4.93%)</title><rect x="264.0" y="341" width="58.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="266.99" y="351.5" >marian..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1,001,001 samples, 0.45%)</title><rect x="316.9" y="325" width="5.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="319.91" y="335.5" ></text>
</g>
<g >
<title>YAML::detail::node_data::get&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,001,001 samples, 0.45%)</title><rect x="205.8" y="229" width="5.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="208.78" y="239.5" ></text>
</g>
<g >
<title>phf_keycmp&lt;unsigned long&gt; (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="197" width="5.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1166.54" y="207.5" ></text>
</g>
<g >
<title>marian::ExpressionGraph::forward (11,011,011 samples, 4.93%)</title><rect x="264.0" y="373" width="58.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="266.99" y="383.5" >marian..</text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (2,002,002 samples, 0.90%)</title><rect x="1004.8" y="69" width="10.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1007.80" y="79.5" ></text>
</g>
<g >
<title>main (102,102,102 samples, 45.74%)</title><rect x="650.3" y="437" width="539.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="653.27" y="447.5" >main</text>
</g>
<g >
<title>Pathie::convert_encodings (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="309" width="5.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1140.09" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (118,118,118 samples, 52.91%)</title><rect x="20.6" y="437" width="624.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="23.58" y="447.5" >[libstdc++.so.6.0.28]</text>
</g>
<g >
<title>[ld-2.31.so] (2,002,002 samples, 0.90%)</title><rect x="10.0" y="453" width="10.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;absl::string_view, int&gt;*, std::vector&lt;std::pair&lt;absl::string_view, int&gt;, std::allocator&lt;std::pair&lt;absl::string_view, int&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_iter&gt; (1,001,001 samples, 0.45%)</title><rect x="1131.8" y="197" width="5.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1134.79" y="207.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="518.0" y="277" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="520.98" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2,002,002 samples, 0.90%)</title><rect x="189.9" y="309" width="10.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="192.91" y="319.5" ></text>
</g>
<g >
<title>marian::bergamot::parseOptionsFromString (8,008,008 samples, 3.59%)</title><rect x="1142.4" y="405" width="42.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1145.38" y="415.5" >mar..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2,002,002 samples, 0.90%)</title><rect x="189.9" y="261" width="10.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="192.91" y="271.5" ></text>
</g>
<g >
<title>marian::rnn::SingleLayerRNN::transduce (2,002,002 samples, 0.90%)</title><rect x="227.0" y="293" width="10.5" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="229.95" y="303.5" ></text>
</g>
<g >
<title>marian::Options::parse (1,001,001 samples, 0.45%)</title><rect x="1179.4" y="389" width="5.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1182.42" y="399.5" ></text>
</g>
<g >
<title>memcmp (3,003,003 samples, 1.35%)</title><rect x="724.3" y="293" width="15.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="727.35" y="303.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_from_dawg (10,010,010 samples, 4.48%)</title><rect x="962.5" y="245" width="52.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="965.47" y="255.5" >Darts..</text>
</g>
<g >
<title>YAML::NodeEvents::Emit (2,002,002 samples, 0.90%)</title><rect x="597.4" y="245" width="10.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="600.35" y="255.5" ></text>
</g>
<g >
<title>malloc (1,001,001 samples, 0.45%)</title><rect x="195.2" y="165" width="5.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="198.20" y="175.5" ></text>
</g>
<g >
<title>start_thread (118,118,118 samples, 52.91%)</title><rect x="20.6" y="453" width="624.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="23.58" y="463.5" >start_thread</text>
</g>
<g >
<title>YAML::Node::operator[]&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,001,001 samples, 0.45%)</title><rect x="1142.4" y="389" width="5.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1145.38" y="399.5" ></text>
</g>
<g >
<title>marian::bergamot::getModelMemoryFromConfig (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="389" width="5.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1140.09" y="399.5" ></text>
</g>
<g >
<title>marian::Options::Options (1,001,001 samples, 0.45%)</title><rect x="438.6" y="341" width="5.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="441.61" y="351.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="200.5" y="309" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="203.49" y="319.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="293" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1166.54" y="303.5" ></text>
</g>
<g >
<title>marian::Transformer&lt;marian::DecoderBase&gt;::postProcess (1,001,001 samples, 0.45%)</title><rect x="221.7" y="309" width="5.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="224.66" y="319.5" ></text>
</g>
<g >
<title>CLI::App::add_option (1,001,001 samples, 0.45%)</title><rect x="1153.0" y="325" width="5.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1155.96" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, IntrusivePtr&lt;marian::Chainable&lt;IntrusivePtr&lt;marian::TensorBase&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2,002,002 samples, 0.90%)</title><rect x="189.9" y="245" width="10.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="192.91" y="255.5" ></text>
</g>
<g >
<title>marian::bergamot::getMemoryBundleFromConfig (1,001,001 samples, 0.45%)</title><rect x="1137.1" y="405" width="5.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1140.09" y="415.5" ></text>
</g>
<g >
<title>operator new (1,001,001 samples, 0.45%)</title><rect x="189.9" y="213" width="5.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="192.91" y="223.5" ></text>
</g>
<g >
<title>marian::New&lt;marian::Options, marian::Options const&amp;&gt; (2,002,002 samples, 0.90%)</title><rect x="597.4" y="293" width="10.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="600.35" y="303.5" ></text>
</g>
<g >
<title>marian::rnn::SingleLayerRNN::apply (2,002,002 samples, 0.90%)</title><rect x="227.0" y="277" width="10.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="229.95" y="287.5" ></text>
</g>
<g >
<title>YAML::NodeEvents::NodeEvents (1,001,001 samples, 0.45%)</title><rect x="1168.8" y="357" width="5.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1171.83" y="367.5" ></text>
</g>
<g >
<title>marian::PerfectHash::PerfectHash (1,001,001 samples, 0.45%)</title><rect x="592.1" y="245" width="5.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="595.06" y="255.5" ></text>
</g>
<g >
<title>qsort_r (1,001,001 samples, 0.45%)</title><rect x="1163.5" y="309" width="5.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1166.54" y="319.5" ></text>
</g>
<g >
<title>marian::Transformer&lt;marian::DecoderBase&gt;::LayerAttention (1,001,001 samples, 0.45%)</title><rect x="216.4" y="309" width="5.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="219.37" y="319.5" ></text>
</g>
<g >
<title>Darts::Details::DoubleArrayBuilder::build_dawg&lt;int&gt; (22,022,022 samples, 9.87%)</title><rect x="846.1" y="261" width="116.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="849.05" y="271.5" >Darts::Details..</text>
</g>
</g>
</svg>
